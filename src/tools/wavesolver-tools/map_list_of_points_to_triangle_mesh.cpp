#include <iostream>
#include <fstream>
#include "Eigen/Dense"
#include "igl/signed_distance.h"
#include "igl/point_mesh_squared_distance.h"
#include "igl/read_triangle_mesh.h"
#include "igl/write_triangle_mesh.h"
#include "igl/barycentric_coordinates.h"

//##############################################################################
// Function Main
//##############################################################################
int main(int argc, char **argv)
{
    if (argc != 4)
    {
        std::cout << "**Usage: " << argv[0]
                  << " <mesh_src> <mesh_tar> <output_map>\n";
        return 1;
    }

    Eigen::MatrixXd Vsrc, Vtar;
    Eigen::MatrixXi Fsrc, Ftar;
    Eigen::VectorXd D;
    Eigen::VectorXi I;
    Eigen::MatrixXd C;
    igl::read_triangle_mesh(argv[1], Vsrc, Fsrc);
    igl::read_triangle_mesh(argv[2], Vtar, Ftar);
    igl::point_mesh_squared_distance(Vsrc, Vtar, Ftar, D, I, C);
    Eigen::MatrixXi Fnull;
    igl::write_triangle_mesh("test.obj", C, Fnull);

    using RowVector3d = Eigen::Matrix<double,1,3>;
    Eigen::MatrixXd L;
    L.resize(C.rows(), 3);
    for (int ii=0; ii<C.rows(); ++ii)
    {
        RowVector3d c = C.row(ii);
        RowVector3d V0 = Vtar.row(Ftar(I(ii), 0));
        RowVector3d V1 = Vtar.row(Ftar(I(ii), 1));
        RowVector3d V2 = Vtar.row(Ftar(I(ii), 2));
        RowVector3d l;
        igl::barycentric_coordinates(c, V0, V1, V2, l);
        std::cout << "error = " << (V0*l[0] + V1*l[1] + V2*l[2] - c).norm() << std::endl;
        L.row(ii) = l;
    }

    std::ofstream stream(argv[3]);
    if (stream)
    {
        stream << std::setprecision(16);
        stream << std::fixed;
        stream << "# Map generated by map_list_of_points_to_triangle_mesh\n";
        stream << "# Input source mesh: " << argv[1] << std::endl;
        stream << "# Input target mesh: " << argv[2] << std::endl;
        stream << "# target_tri_id barycentric_x barycentric_y barycentric_z\n";
        for (int ii=0; ii<I.rows(); ++ii)
        {
            stream << I(ii) << " "
                   << L(ii,0) << " " << L(ii,1) << " " << L(ii,2)
                   << "\n";
        }
        stream.close();
    }

    return 0;
}
